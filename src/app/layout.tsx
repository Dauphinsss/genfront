"use client";

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { CourseProvider } from "@/lib/course-context";
import { ToastProvider } from "@/components/ui/toast";
import { DesktopOnlyScreen } from "@/components/desktop-only-screen";
import { useEffect, useState } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// No podemos exportar metadata en un client component
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isDesktop, setIsDesktop] = useState<boolean | null>(null);

  useEffect(() => {
    // Detectar si es dispositivo móvil o tablet
    const checkDevice = () => {
      const width = window.innerWidth;
      const userAgent = navigator.userAgent.toLowerCase();
      const uaData = (navigator as Navigator & {
        userAgentData?: { mobile?: boolean };
      }).userAgentData;

      const matchesMobileUA =
        /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(
          userAgent
        );
      const hasTouch = navigator.maxTouchPoints > 1;
      const verySmallViewport = width < 640;

      const isMobileDevice = Boolean(
        uaData?.mobile || matchesMobileUA || (hasTouch && verySmallViewport)
      );

      setIsDesktop(!isMobileDevice);
    };

    checkDevice();

    // Escuchar cambios en el tamaño de la ventana
    window.addEventListener("resize", checkDevice);
    return () => window.removeEventListener("resize", checkDevice);
  }, []);

  return (
    <html lang="es">
      <head>
        <title>Pyson - Plataforma de Aprendizaje</title>
        <meta
          name="description"
          content="Plataforma de aprendizaje de programación"
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {isDesktop === null ? (
          <div className="min-h-screen flex items-center justify-center bg-background">
            <div className="text-center space-y-4">
              <div className="w-12 h-12 border-4 border-border border-t-foreground rounded-full animate-spin mx-auto"></div>
              <p className="text-muted-foreground">Cargando...</p>
            </div>
          </div>
        ) : isDesktop === false ? (
          <DesktopOnlyScreen />
        ) : (
          <ToastProvider>
            <CourseProvider>{children}</CourseProvider>
          </ToastProvider>
        )}
      </body>
    </html>
  );
}
